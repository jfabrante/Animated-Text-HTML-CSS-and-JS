{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jfabrante/Animated-Text-HTML-CSS-and-JS/blob/main/Descubre%20URLs%20de%20Bajo%20Rendimiento%20en%20Tu%20Sitio\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8_vKVTv2btD-",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "outputId": "cf4f37eb-eae5-4601-f6c6-b6240193b4f8"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-924d8ba6-a308-496a-b2d9-712cc10828cf\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-924d8ba6-a308-496a-b2d9-712cc10828cf\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving client.json to client (1).json\n"
          ]
        }
      ],
      "source": [
        "# INICIA ESTE MODULO PARA SUBIR TU ARCHIVO JSON DE SEARCH CONSOLE\n",
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import csv\n",
        "import requests\n",
        "from googleapiclient.discovery import build\n",
        "from google.oauth2 import service_account\n",
        "from datetime import datetime, timedelta\n",
        "from xml.etree import ElementTree\n",
        "\n",
        "# Recuperar URLs de la página de la API de Search Console para un rango de fechas específico.\n",
        "def get_search_console_pages(start_date, end_date):\n",
        "    request = {\n",
        "        'startDate': start_date,\n",
        "        'endDate': end_date,\n",
        "        'dimensions': ['page']\n",
        "    }\n",
        "\n",
        "    response = search_console_service.searchanalytics().query(siteUrl='https://vikingseo.es/', body=request).execute()\n",
        "    return {entry['keys'][0] for entry in response.get('rows', []) if \"#\" not in entry['keys'][0]}\n",
        "\n",
        "# Recuperar sitemaps de sitemap_index.xml.\n",
        "def get_sitemaps():\n",
        "    try:\n",
        "        response = requests.get('https://vikingseo.es/sitemap_index.xml')\n",
        "        if response.status_code == 200:\n",
        "            root = ElementTree.fromstring(response.content.decode('utf-8'))\n",
        "            namespaces = {'sitemap': 'http://www.sitemaps.org/schemas/sitemap/0.9'}\n",
        "            return [sitemap.find('sitemap:loc', namespaces).text for sitemap in root.findall('sitemap:sitemap', namespaces)]\n",
        "        else:\n",
        "            print(f\"Received unexpected status code {response.status_code}\")\n",
        "            return []\n",
        "    except ElementTree.ParseError as e:\n",
        "        print(f\"Error parsing XML: {e}\")\n",
        "        return []\n",
        "    except Exception as e:\n",
        "        print(f\"An unexpected error occurred: {e}\")\n",
        "        return []\n",
        "\n",
        "# Recuperar URLs y fechas de publicación o modificación de esos sitemaps.\n",
        "def get_urls_and_dates_from_sitemap(sitemap_url):\n",
        "    response = requests.get(sitemap_url)\n",
        "    root = ElementTree.fromstring(response.content)\n",
        "    namespaces = {'urlset': 'http://www.sitemaps.org/schemas/sitemap/0.9'}\n",
        "\n",
        "    urls_and_dates = []\n",
        "    current_date = datetime.now().date()\n",
        "\n",
        "    for url in root.findall('urlset:url', namespaces):\n",
        "        loc = url.find('urlset:loc', namespaces).text\n",
        "        lastmod_element = url.find('urlset:lastmod', namespaces)\n",
        "        date_str = lastmod_element.text if lastmod_element is not None else \"N/A\"\n",
        "\n",
        "        # Calcular días desde la fecha (publicación o modificación)\n",
        "        if date_str != \"N/A\":\n",
        "            date_obj = datetime.strptime(date_str.split('T')[0], '%Y-%m-%d').date()\n",
        "            days_since_date = (current_date - date_obj).days\n",
        "        else:\n",
        "            days_since_date = \"N/A\"\n",
        "\n",
        "        urls_and_dates.append((loc, date_str, days_since_date))\n",
        "\n",
        "    return urls_and_dates\n",
        "\n",
        "# Configuración de la API de Search Console\n",
        "credentials = service_account.Credentials.from_service_account_file(\n",
        "    \"client.json\",\n",
        "    scopes=[\"https://www.googleapis.com/auth/webmasters.readonly\"]\n",
        ")\n",
        "search_console_service = build('webmasters', 'v3', credentials=credentials)\n",
        "\n",
        "# Obtener fechas para los diferentes periodos\n",
        "end_date = datetime.now()\n",
        "start_date_last_15 = end_date - timedelta(days=15)\n",
        "start_date_previous_15 = start_date_last_15 - timedelta(days=15)\n",
        "start_date_last_month = end_date - timedelta(days=30)\n",
        "start_date_other_month = start_date_last_month - timedelta(days=30)\n",
        "start_date_2_months_ago = start_date_other_month - timedelta(days=30)\n",
        "start_date_3_months_ago = start_date_2_months_ago - timedelta(days=30)\n",
        "\n",
        "# Obtener datos de Search Console para los diferentes periodos\n",
        "console_pages_last_15 = get_search_console_pages(start_date_last_15.strftime('%Y-%m-%d'), end_date.strftime('%Y-%m-%d'))\n",
        "console_pages_previous_15 = get_search_console_pages(start_date_previous_15.strftime('%Y-%m-%d'), start_date_last_15.strftime('%Y-%m-%d'))\n",
        "console_pages_last_month = get_search_console_pages(start_date_last_month.strftime('%Y-%m-%d'), start_date_last_15.strftime('%Y-%m-%d'))\n",
        "console_pages_other_month = get_search_console_pages(start_date_other_month.strftime('%Y-%m-%d'), start_date_last_month.strftime('%Y-%m-%d'))\n",
        "console_pages_2_months_ago = get_search_console_pages(start_date_2_months_ago.strftime('%Y-%m-%d'), start_date_other_month.strftime('%Y-%m-%d'))\n",
        "console_pages_3_months_ago = get_search_console_pages(start_date_3_months_ago.strftime('%Y-%m-%d'), start_date_2_months_ago.strftime('%Y-%m-%d'))\n",
        "\n",
        "# Obtener URLs y fechas de publicación o modificación de sitemaps\n",
        "sitemap_urls = get_sitemaps()\n",
        "all_sitemap_urls_and_dates = []\n",
        "for sitemap_url in sitemap_urls:\n",
        "    all_sitemap_urls_and_dates.extend(get_urls_and_dates_from_sitemap(sitemap_url))\n",
        "\n",
        "# Inicializar listas\n",
        "sitemap_list = []\n",
        "index_status_last_15_days = []\n",
        "index_status_previous_15_days = []\n",
        "index_status_last_month = []\n",
        "index_status_other_month = []\n",
        "index_status_2_months_ago = []\n",
        "index_status_3_months_ago = []\n",
        "date_list = []\n",
        "days_since_date_list = []\n",
        "\n",
        "# Comparar URLs para determinar el estado de indexación y obtener las fechas y días desde la fecha\n",
        "for url, date_str, days_since_date in all_sitemap_urls_and_dates:\n",
        "    if \"#\" not in url:\n",
        "        sitemap_list.append(url)\n",
        "        index_status_last_15_days.append(\"🟩\" if url in console_pages_last_15 else \"🟧\")\n",
        "        index_status_previous_15_days.append(\"🟩\" if url in console_pages_previous_15 else \"🟧\")\n",
        "        index_status_last_month.append(\"🟩\" if url in console_pages_last_month else \"🟧\")\n",
        "        index_status_other_month.append(\"🟩\" if url in console_pages_other_month else \"🟧\")\n",
        "        index_status_2_months_ago.append(\"🟩\" if url in console_pages_2_months_ago else \"🟧\")\n",
        "        index_status_3_months_ago.append(\"🟩\" if url in console_pages_3_months_ago else \"🟧\")\n",
        "        date_list.append(date_str)\n",
        "        days_since_date_list.append(days_since_date)\n",
        "\n",
        "# Agregar una columna adicional para el emoji rojo si todas las celdas de las columnas de fechas son \"No\"\n",
        "emoji_red = '🔴' if all(date == '🟧' for date in date_list) else ''\n",
        "\n",
        "# Crear una lista de nombres de meses y años para las cabeceras\n",
        "months_and_years = [\n",
        "    start_date_3_months_ago.strftime('%B %Y'),\n",
        "    start_date_2_months_ago.strftime('%B %Y'),\n",
        "    start_date_other_month.strftime('%B %Y'),\n",
        "    start_date_last_month.strftime('%B %Y'),\n",
        "    start_date_last_15.strftime('%d/%m'),\n",
        "]\n",
        "\n",
        "# Añadir las fechas y los nombres de los meses en las cabeceras del CSV\n",
        "fieldnames = ['Sitemap URL', 'Indexada Últimos 15 días', 'Indexada 15 días anteriores', f'Indexada {months_and_years[3]}', f'Indexada {months_and_years[2]}', f'Indexada {months_and_years[1]}', f'Indexada {months_and_years[0]}', 'Fecha de publicación', 'Días desde la publicación', 'Emoji Rojo']\n",
        "\n",
        "# Escribir en un CSV\n",
        "with open('url_comparison.csv', 'w', newline='', encoding='utf-8') as csvfile:\n",
        "    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n",
        "    writer.writeheader()\n",
        "    for sitemap, index_last_15, index_prev_15, index_last_month, index_other_month, index_2_months_ago, index_3_months_ago, date, days_since_date in zip(sitemap_list, index_status_last_15_days, index_status_previous_15_days, index_status_last_month, index_status_other_month, index_status_2_months_ago, index_status_3_months_ago, date_list, days_since_date_list):\n",
        "        writer.writerow({\n",
        "            'Sitemap URL': sitemap,\n",
        "            'Indexada Últimos 15 días': index_last_15,\n",
        "            'Indexada 15 días anteriores': index_prev_15,\n",
        "            f'Indexada {months_and_years[3]}': index_last_month,\n",
        "            f'Indexada {months_and_years[2]}': index_other_month,\n",
        "            f'Indexada {months_and_years[1]}': index_2_months_ago,\n",
        "            f'Indexada {months_and_years[0]}': index_3_months_ago,\n",
        "            'Fecha de publicación': date,\n",
        "            'Días desde la publicación': days_since_date,\n",
        "            'Emoji Rojo': emoji_red\n",
        "        })\n",
        "\n",
        "# Crear una lista de URLs que están en la API pero no en el sitemap\n",
        "urls_in_api_not_in_sitemap = [url for url in console_pages_last_15 if url not in sitemap_list]\n",
        "\n",
        "\n",
        "# Escribir en un CSV\n",
        "with open('url_comparison.csv', 'w', newline='', encoding='utf-8') as csvfile:\n",
        "    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n",
        "    writer.writeheader()\n",
        "    for sitemap, index_last_15, index_prev_15, index_last_month, index_other_month, index_2_months_ago, index_3_months_ago, date, days_since_date in zip(sitemap_list, index_status_last_15_days, index_status_previous_15_days, index_status_last_month, index_status_other_month, index_status_2_months_ago, index_status_3_months_ago, date_list, days_since_date_list):\n",
        "\n",
        "        # Asegúrate de que cada estado de indexación tiene un valor\n",
        "        index_states = [\n",
        "            index_last_15 if index_last_15 else 'No',\n",
        "            index_prev_15 if index_prev_15 else 'No',\n",
        "            index_last_month if index_last_month else 'No',\n",
        "            index_other_month if index_other_month else 'No',\n",
        "            index_2_months_ago if index_2_months_ago else 'No',\n",
        "            index_3_months_ago if index_3_months_ago else 'No'\n",
        "        ]\n",
        "\n",
        "        # Verificar si todas las columnas de estado de indexación son 'No'\n",
        "        emoji_red = 'x' if all(status == 'No' for status in index_states) else ''\n",
        "\n",
        "        # Escribe en el archivo CSV\n",
        "        writer.writerow({\n",
        "            'Sitemap URL': sitemap,\n",
        "            'Indexada Últimos 15 días': index_states[0],\n",
        "            'Indexada 15 días anteriores': index_states[1],\n",
        "            'Indexada October 2023': index_states[2],\n",
        "            'Indexada September 2023': index_states[3],\n",
        "            'Indexada August 2023': index_states[4],\n",
        "            'Indexada July 2023': index_states[5],\n",
        "            'Fecha de publicación': date,\n",
        "            'Días desde la publicación': days_since_date,\n",
        "            'Emoji Rojo': emoji_red\n",
        "        })\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# Descargar el archivo url_comparison.csv\n",
        "from google.colab import files\n",
        "files.download('url_comparison.csv')\n",
        "\n",
        "# Descargar el archivo urls_in_api_not_in_sitemap.csv\n",
        "files.download('urls_in_api_not_in_sitemap.csv')\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "C61l_v7xbuW8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "outputId": "f4d900aa-5636-49cb-e3a5-85ca4b97e911"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_84792b42-9ad8-44b9-af4a-795803af4016\", \"url_comparison.csv\", 24496)"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_35d097b9-5430-4789-adcf-48c4238396c9\", \"urls_in_api_not_in_sitemap.csv\", 3282)"
            ]
          },
          "metadata": {}
        }
      ]
    }
  ]
}